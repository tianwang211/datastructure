class Trie {
private:
    struct TrieNode{
        TrieNode():isEnd(false),children(26,nullptr){}
        
        ~TrieNode(){
            for(TrieNode* child:children){
                if(child) delete child;
            }
        }
        vector<TrieNode*> children;
        bool isEnd;
    };
    std::unique_ptr<TrieNode> root;
public:
    /** Initialize your data structure here. */
    Trie():root(new TrieNode()) {
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* cur=root.get();
        for(auto s:word){
            if(cur->children[s-'a']==nullptr){
                cur->children[s-'a']=new TrieNode();
            }
            cur=cur->children[s-'a'];
        }
        cur->isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* cur=root.get();
        for(auto s:word){
            if(cur->children[s-'a']==nullptr){
                return false;
            }
            cur=cur->children[s-'a'];
        }
        return cur->isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* cur=root.get();
        for(auto s:prefix){
            if(cur->children[s-'a']==nullptr){
                return false;
            }
            cur=cur->children[s-'a'];
        }
        return true;
    }
};
