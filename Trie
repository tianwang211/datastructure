class Trie {
private:
    struct TrieNode{
        TrieNode* next[26]={nullptr};
        bool isEnd;  
    };
    
    TrieNode* root=nullptr;
public:
    
    /** Initialize your data structure here. */
    Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* p;    
        p=root;
        for(auto c:word){
            if(p->next[c-'a']==nullptr){
                p->next[c-'a']=new TrieNode();
            }
            p=p->next[c-'a'];
        }
        p->isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* p(root);
        for(auto c:word){
            if(p->next[c-'a']==nullptr)
                return false;
            else p=p->next[c-'a'];
        }
        return p->isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* p(root);
        for(auto c:prefix){
            if(p->next[c-'a']==nullptr)
                return false;
            else p=p->next[c-'a'];
        }
        return true;
    }
};
